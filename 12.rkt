#lang Racket

; Project Euler
; Problem 12 Solution
; by Eli Spiro
; January 31, 2010

; The sequence of triangle numbers is generated by adding the natural numbers.
; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
; The first ten terms would be:
; 
; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
; 
; Let us list the factors of the first seven triangle numbers:
; 
;  1: 1
;  3: 1,3
;  6: 1,2,3,6
; 10: 1,2,5,10
; 15: 1,3,5,15
; 21: 1,3,7,21
; 28: 1,2,4,7,14,28
; We can see that 28 is the first triangle number to have over five divisors.
; 
; What is the value of the first triangle number to have over five hundred divisors?


;; number-of-divisors: num -> num
;; determines the number of divisors of a given number
(define (number-of-divisors composite current-num-divisors current-divisor)
  (cond[(> current-divisor (/ composite 2)) current-num-divisors]
       [(zero? (remainder composite current-divisor)) (number-of-divisors composite (add1 current-num-divisors) (add1 current-divisor))]
       [else (number-of-divisors composite current-num-divisors (add1 current-divisor))]))


;; first-triangle-number-divisors: num -> num
;; finds the first triangle number with at least the given number of divisors
(define (first-triangle-number-divisors current-num next-add looking-for)
  (cond[(>= (number-of-divisors current-num 1 2) looking-for) current-num]
       [else (first-triangle-number-divisors (+ current-num next-add) (add1 next-add) looking-for)]))

(first-triangle-number-divisors 1 2 500)